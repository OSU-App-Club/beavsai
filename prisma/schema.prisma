generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  storageLimit   Int              @default(1073741824)
  storageUsed    Int              @default(0)
  createdAt      DateTime         @default(now())
  accounts       Account[]
  Chat           Chat[]
  CourseMaterial CourseMaterial[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CourseMaterial {
  id            String          @id @default(uuid())
  title         String          @unique
  fileName      String
  fileUrl       String
  uploadedAt    DateTime        @default(now())
  description   String?
  pages         Int             @default(0)
  fileSize      Int             @default(0) @map("file_size")
  userId        String?
  Chat          Chat[]
  user          User?           @relation(fields: [userId], references: [id])
  DocumentChunk DocumentChunk[]
  Embedding     Embedding[]

  @@map("course_materials")
}

model Chat {
  id             String          @id @default(cuid())
  userId         String
  name           String?         @default("Chat")
  fileId         String?
  createdAt      DateTime        @default(now())
  CourseMaterial CourseMaterial? @relation(fields: [fileId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  messages       Message[]       
  initialMessage String?

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  content   String
  role      String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DocumentChunk {
  id         String         @id @default(cuid())
  content    String
  embeddings Unsupported("vector(1536)")?
  pageNumber Int
  materialId String
  material   CourseMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model Embedding {
  id         String         @id @default(cuid())
  content    String
  embedding  Unsupported("vector(1536)")?
  pageNumber Int
  materialId String
  material   CourseMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("embeddings")
}